## Bug Report

### Name
Confusion in variable names

### Description

Malloc check on wrong variable and wrong variable name in memory access.

### Affected Lines
In `resize.c:47` , `resize.c:60` 

### Expected vs Observed
We expect an error message saying that there is a memory error when we asking for more memory than available. Instead we have a SEGV.
We also expect the program to access memory with respect to the new_width but it accesses memory as a function of the width.

### Steps to Reproduce

Enter a big factor such that malloc returns NULL.


#### Command

```
./resize_image poc.png output_image 100000  

```


### Suggested Fix Description
Add check : new_img->px != NULL instead of img->px != NULL
replace (struct pixel (*)[width])new_img->px  with (struct pixel (*)[new_width])new_img->px






### Name
Double free and image not freed 

### Description

The variable img->px is freed 2 times in a row => undefined behaviour (corrupt memory etc...).
The variable img is not freed in case of memory error.

### Affected Lines
In `resize.c:87`, `resize.c:84`, `resize.c:72`, `resize.c:73`, `resize.c:75` and `resize.c:76`

### Expected vs Observed
When malloc fails we expect a nice error message. Instead we can have SEGV or other errors since the memory is corrupted after the double free. Adding to that, the variable img is not freed.

### Steps to Reproduce

Launch the program when you don't have any memory available for the struct image.

#### Command

```
./resize_image poc.png output_image 2

```


### Suggested Fix Description
Remove the unnecessary call to free and add free(img) after free(img->px).
Set the pointers to NULL after they are freed.




### Name
Comparisons between double and unsigned

### Description

in the for loops we compare x and y ,which are unsigned values, with the result of a round that can overflow when big numbers are entered.
This can cause SEGV.

### Affected Lines
In `resize.c:58` and `resize.c:59`

### Expected vs Observed
We expect the program to work since we were able to allocate memory even if the factor was big. But the program returns a SEGV

### Steps to Reproduce

Launch the program with a big factor

#### Command

```
./resize_image poc.png output_image 1000000000000000000000


```


### Suggested Fix Description
replace y < round(..) by y < new_heigth. Same modifications for x

